package com.chillbilling.service;

import com.chillbilling.dto.InvoiceRequest;
import com.chillbilling.entity.Invoice;
import com.chillbilling.entity.InvoiceItem;
import com.chillbilling.entity.Product;
import com.chillbilling.entity.User;
import com.chillbilling.exception.BusinessException;
import com.chillbilling.exception.ResourceNotFoundException;
import com.chillbilling.repository.InvoiceRepository;
import com.chillbilling.repository.ProductRepository;
import com.chillbilling.repository.UserRepository;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Service
@Transactional
public class InvoiceService {

    private final InvoiceRepository invoiceRepository;
    private final UserRepository userRepository;
    private final ProductRepository productRepository;

    public InvoiceService(InvoiceRepository invoiceRepository,
                          UserRepository userRepository,
                          ProductRepository productRepository) {
        this.invoiceRepository = invoiceRepository;
        this.userRepository = userRepository;
        this.productRepository = productRepository;
    }

    // ðŸ”¹ Generate invoice number
    private String generateInvoiceNumber() {
        return "INV-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
    }

    // ðŸ”¹ Create invoice
    public Invoice createInvoice(InvoiceRequest request) {
        User customer = userRepository.findByEmailId(request.getCustomerEmail())
                .orElseThrow(() -> new ResourceNotFoundException("Customer not found with email: " + request.getCustomerEmail()));

        Invoice invoice = new Invoice();
        invoice.setInvoiceNumber(generateInvoiceNumber());
        invoice.setCustomer(customer);
        invoice.setInvoiceDate(LocalDate.now());
        invoice.setDueDate(request.getDueDate());

        double totalAmount = 0.0;
        List<InvoiceItem> invoiceItems = new ArrayList<>();

        for (InvoiceRequest.ItemRequest itemReq : request.getItems()) {
            Product product = productRepository.findByProductName(itemReq.getProductName())
                    .orElseThrow(() -> new ResourceNotFoundException("Product not found: " + itemReq.getProductName()));

            double lineTotal = product.getPrice() * itemReq.getQuantity();

            InvoiceItem item = new InvoiceItem();
            item.setInvoice(invoice);
            item.setProduct(product);
            item.setQuantity(itemReq.getQuantity());
            item.setUnitPrice(product.getPrice());
            item.setTotalPrice(lineTotal);

            invoiceItems.add(item);
            totalAmount += lineTotal;
        }

        invoice.setItems(invoiceItems);
        invoice.setTotalAmount(totalAmount);

        // ðŸ”¹ Paid amount validations
        Double paidAmount = request.getPaidAmount();
        if (paidAmount == null || paidAmount < 0) {
            throw new BusinessException("Paid amount must be provided and >= 0.");
        }
        if (paidAmount > totalAmount) {
            throw new BusinessException("Paid amount cannot exceed total amount.");
        }

        invoice.setPaidAmount(paidAmount);
        invoice.setBalance(totalAmount - paidAmount);

        // ðŸ”¹ Set initial status
        updateInvoiceStatus(invoice);

        return invoiceRepository.save(invoice);
    }

    // ðŸ”¹ Update invoice
    public Invoice updateInvoice(String invoiceNumber, InvoiceRequest request) {
        Invoice invoice = invoiceRepository.findByInvoiceNumber(invoiceNumber)
                .orElseThrow(() -> new ResourceNotFoundException("Invoice not found: " + invoiceNumber));

        invoice.getItems().clear();
        double totalAmount = 0.0;
        List<InvoiceItem> invoiceItems = new ArrayList<>();

        for (InvoiceRequest.ItemRequest itemReq : request.getItems()) {
            Product product = productRepository.findByProductName(itemReq.getProductName())
                    .orElseThrow(() -> new ResourceNotFoundException("Product not found: " + itemReq.getProductName()));

            double lineTotal = product.getPrice() * itemReq.getQuantity();

            InvoiceItem item = new InvoiceItem();
            item.setInvoice(invoice);
            item.setProduct(product);
            item.setQuantity(itemReq.getQuantity());
            item.setUnitPrice(product.getPrice());
            item.setTotalPrice(lineTotal);

            invoiceItems.add(item);
            totalAmount += lineTotal;
        }

        invoice.setItems(invoiceItems);
        invoice.setTotalAmount(totalAmount);

        Double paidAmount = request.getPaidAmount();
        if (paidAmount == null || paidAmount < 0) {
            throw new BusinessException("Paid amount must be provided and >= 0.");
        }
        if (paidAmount > totalAmount) {
            throw new BusinessException("Paid amount cannot exceed total amount.");
        }

        invoice.setPaidAmount(paidAmount);
        invoice.setBalance(totalAmount - paidAmount);
        invoice.setDueDate(request.getDueDate());

        updateInvoiceStatus(invoice);

        return invoiceRepository.save(invoice);
    }

    // ðŸ”¹ Delete invoice
    public void deleteInvoice(String invoiceNumber) {
        Invoice invoice = invoiceRepository.findByInvoiceNumber(invoiceNumber)
                .orElseThrow(() -> new ResourceNotFoundException("Invoice not found: " + invoiceNumber));
        invoiceRepository.delete(invoice);
    }

    // ðŸ”¹ Get single invoice
    public Invoice getInvoice(String invoiceNumber) {
        return invoiceRepository.findByInvoiceNumber(invoiceNumber)
                .orElseThrow(() -> new ResourceNotFoundException("Invoice not found: " + invoiceNumber));
    }

    // ðŸ”¹ Utility for status calculation
    private void updateInvoiceStatus(Invoice invoice) {
        if (invoice.getBalance() == 0) {
            invoice.setStatus(Invoice.Status.PAID);
        } else if (invoice.getPaidAmount() == 0) {
            if (invoice.getDueDate().isBefore(LocalDate.now())) {
                invoice.setStatus(Invoice.Status.OVERDUE);
            } else {
                invoice.setStatus(Invoice.Status.UNPAID);
            }
        } else {
            if (invoice.getDueDate().isBefore(LocalDate.now())) {
                invoice.setStatus(Invoice.Status.OVERDUE);
            } else {
                invoice.setStatus(Invoice.Status.PARTIALLY_PAID);
            }
        }
    }
}
