package com.chillbilling.security;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;
import java.util.Map;

@Component
public class JwtUtil {

    // TODO: move to properties; keep strong secret (>= 256-bit for HS256)
    private final Key key = Keys.hmacShaKeyFor(
            "replace-with-a-very-long-256bit-secret-really-long-string-here".getBytes());

    private static final long EXPIRATION_MS = 1000L * 60 * 60 * 8; // 8 hours

    public String generateToken(String subjectEmail, String role) {
        Date now = new Date();
        Date exp = new Date(now.getTime() + EXPIRATION_MS);

        return Jwts.builder()
                .setSubject(subjectEmail)
                .addClaims(Map.of("role", role))
                .setIssuedAt(now)
                .setExpiration(exp)
                .signWith(key, SignatureAlgorithm.HS256)
                .compact();
    }

    public String extractSubject(String token) {
        return parse(token).getBody().getSubject();
    }

    public String extractRole(String token) {
        Object r = parse(token).getBody().get("role");
        return r == null ? null : r.toString();
    }

    public boolean isValid(String token) {
        try {
            parse(token);
            return true;
        } catch (JwtException | IllegalArgumentException e) {
            return false;
        }
    }

    private Jws<Claims> parse(String token) {
        return Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token);
    }
}
