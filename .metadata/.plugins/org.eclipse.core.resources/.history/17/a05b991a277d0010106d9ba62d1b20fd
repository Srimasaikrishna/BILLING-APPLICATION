package com.chillbilling.service;

import com.chillbilling.dto.InvoiceRequest;
import com.chillbilling.dto.PaymentRecord;
import com.chillbilling.entity.Invoice;
import com.chillbilling.entity.InvoiceItem;
import com.chillbilling.entity.Product;
import com.chillbilling.entity.User;
import com.chillbilling.entity.Payment;
import com.chillbilling.exception.BusinessException;
import com.chillbilling.exception.ResourceNotFoundException;
import com.chillbilling.repository.InvoiceRepository;
import com.chillbilling.repository.ProductRepository;
import com.chillbilling.repository.UserRepository;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.UUID;

@Service
@Transactional
public class InvoiceService {

    private final InvoiceRepository invoiceRepository;
    private final UserRepository userRepository;
    private final ProductRepository productRepository;
    private final InvoiceItemService invoiceItemService;
    private final PaymentService paymentService;

    public InvoiceService(InvoiceRepository invoiceRepository,
                          UserRepository userRepository,
                          ProductRepository productRepository,
                          InvoiceItemService invoiceItemService,
                          PaymentService paymentService) {
        this.invoiceRepository = invoiceRepository;
        this.userRepository = userRepository;
        this.productRepository = productRepository;
        this.invoiceItemService = invoiceItemService;
        this.paymentService = paymentService;
    }

    // Generate invoice number
    private String generateInvoiceNumber() {
        String invoiceNumber;
        do {
            int number = 100000 + new Random().nextInt(900000);
            invoiceNumber = "INV" + number;
        } while (invoiceRepository.findByInvoiceNumber(invoiceNumber).isPresent()); // ensure unique

        return invoiceNumber;
    }
    
    public Invoice createInvoice(InvoiceRequest request) {
        // Fetch customer
        User customer = userRepository.findByEmailId(request.getCustomerEmail())
                .orElseThrow(() -> new ResourceNotFoundException(
                        "Customer not found with email: " + request.getCustomerEmail()));

        // Validate role
        if (customer.getRole() != User.Role.CUSTOMER) {
            throw new BusinessException("Invoice can only be generated for customers.");
        }

        // Create invoice
        Invoice invoice = new Invoice();
        invoice.setInvoiceNumber(generateInvoiceNumber());
        invoice.setCustomer(customer);
        invoice.setInvoiceDate(LocalDate.now());
        invoice.setDueDate(request.getDueDate());

        invoiceItemService.createItems(invoice, request.getItems());

        // Set initial status
        updateInvoiceStatus(invoice);

        return invoiceRepository.save(invoice);
    }

    // Update invoice
    public Invoice updateInvoice(String invoiceNumber, InvoiceRequest request) {
        Invoice invoice = invoiceRepository.findByInvoiceNumber(invoiceNumber)
                .orElseThrow(() -> new ResourceNotFoundException("Invoice not found: " + invoiceNumber));

        // Update due date
        invoice.setDueDate(request.getDueDate());

        // Update items and recalculate total amount
        invoiceItemService.updateItems(invoiceNumber, request.getItems());
        double totalAmount = invoice.getTotalAmount();  // updated inside updateItems

        // Validate new paid amount
        Double newPaidAmount = request.getPaidAmount();
        if (newPaidAmount == null || newPaidAmount < 0) {
            throw new BusinessException("Paid amount must be provided and >= 0.");
        }
        if (newPaidAmount > totalAmount) {
            throw new BusinessException("Paid amount cannot exceed total amount.");
        }

        // Calculate payment difference
        Double oldPaidAmount = invoice.getPaidAmount();
        double paymentDifference = newPaidAmount - oldPaidAmount;

        // If payment increased, record the new payment
        if (paymentDifference > 0) {
            PaymentRecord paymentRecord = new PaymentRecord();
            paymentRecord.setInvoiceNumber(invoiceNumber);
            paymentRecord.setAmount(paymentDifference);
            paymentRecord.setStatus(Payment.Status.SUCCESS);
            paymentRecord.setMethod(Payment.Method.CASH); // default method
            paymentRecord.setTransactionId(""); // blank if not provided
            paymentRecord.setPaymentDate(LocalDateTime.now());

            paymentService.recordPayment(paymentRecord);
        }

        // Update invoice financials
        invoice.setPaidAmount(newPaidAmount);
        invoice.setBalance(totalAmount - newPaidAmount);

        // Update invoice status
        updateInvoiceStatus(invoice);

        return invoiceRepository.save(invoice);
    }


    // Delete invoice
    public void deleteInvoice(String invoiceNumber) {
        Invoice invoice = invoiceRepository.findByInvoiceNumber(invoiceNumber)
                .orElseThrow(() -> new ResourceNotFoundException("Invoice not found: " + invoiceNumber));
        invoiceRepository.delete(invoice);
    }

    // Get single invoice
    public Invoice getInvoice(String invoiceNumber) {
        return invoiceRepository.findByInvoiceNumber(invoiceNumber)
                .orElseThrow(() -> new ResourceNotFoundException("Invoice not found: " + invoiceNumber));
    }
    
    // Get all invoices
    public List<Invoice> getAllInvoices() {
        return invoiceRepository.findAll();
    }
    
    public List<Invoice> getInvoicesByCustomerEmail(String email) {
        User customer = userRepository.findByEmailId(email)
                .orElseThrow(() -> new ResourceNotFoundException("Customer not found with email: " + email));

        if (customer.getRole() != User.Role.CUSTOMER) {
            throw new BusinessException("Only customers can fetch their invoices.");
        }

        return invoiceRepository.findByCustomer(customer);
    }

    // Utility for status calculation
    private void updateInvoiceStatus(Invoice invoice) {
        if (invoice.getBalance() == 0) {
            invoice.setStatus(Invoice.Status.PAID);
        } else if (invoice.getPaidAmount() == 0) {
            if (invoice.getDueDate().isBefore(LocalDate.now())) {
                invoice.setStatus(Invoice.Status.OVERDUE);
            } else {
                invoice.setStatus(Invoice.Status.UNPAID);
            }
        } else {
            if (invoice.getDueDate().isBefore(LocalDate.now())) {
                invoice.setStatus(Invoice.Status.OVERDUE);
            } else {
                invoice.setStatus(Invoice.Status.PARTIALLY_PAID);
            }
        }
    }
}
