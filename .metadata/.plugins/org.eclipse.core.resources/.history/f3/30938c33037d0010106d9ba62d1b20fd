package com.chillbilling.controller;

import com.chillbilling.dto.EmailRequest;
import com.chillbilling.entity.User;
import com.chillbilling.service.UserService;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/users")
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    // -----------------------
    // CUSTOMER: Self registration
    // -----------------------
    @PostMapping("/register")
    public User registerCustomer(@RequestBody User user) {
        return userService.registerCustomer(user);
    }

    // -----------------------
    // ADMIN: Manage all users
    // -----------------------
    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping
    public User addUser(@RequestBody User user) {
        return userService.addUser(user); // admin decides role
    }

    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping
    public List<User> getAllUsers() {
        return userService.getAllUsers();
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/by-email")
    public User getUserByEmail(@RequestBody Map<String, String> body) {
        return userService.getUserByEmail(body.get("email"));
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping
    public User updateUserByAdmin(@RequestBody User updatedUser) {
        return userService.updateUser(updatedUser);
    }

    @PreAuthorize("hasRole('ADMIN')")
    @DeleteMapping
    public void deleteUserByEmail(@RequestBody Map<String, String> body) {
        userService.deleteUserByEmail(body.get("email"));
    }

    // -----------------------
    // ACCOUNTANT: Manage only customers
    // -----------------------
    @PreAuthorize("hasRole('ACCOUNTANT')")
    @PostMapping("/customers")
    public User createCustomer(@RequestBody User user) {
        user.setRole(User.Role.CUSTOMER); // enforce role
        return userService.addUser(user);
    }

    @PreAuthorize("hasRole('ACCOUNTANT')")
    @GetMapping("/customers")
    public List<User> getAllCustomers() {
        return userService.getAllCustomers();
    }

    @PreAuthorize("hasRole('ACCOUNTANT')")
    @PostMapping("/customers/by-email")
    public User getCustomerByEmail(@RequestBody EmailRequest request) {
        return userService.getUserByEmail(request.getEmail());// service enforces role check
    }

    @PreAuthorize("hasRole('ACCOUNTANT')")
    @PutMapping("/customers")
    public User updateCustomer(@RequestBody User updatedUser) {
        return userService.updateCustomer(updatedUser);
    }

    @PreAuthorize("hasRole('ACCOUNTANT')")
    @DeleteMapping("/customers")
    public void deleteCustomerByEmail(@RequestBody Map<String, String> body) {
        userService.deleteCustomerByEmail(body.get("email"));
    }

    // -----------------------
    // CUSTOMER: Self service
    // -----------------------
    @PreAuthorize("hasRole('CUSTOMER')")
    @GetMapping("/me")
    public User getMyProfile(Authentication auth) {
        return userService.getUserByEmail(auth.getName()); // email from JWT
    }

    @PreAuthorize("hasRole('CUSTOMER')")
    @PutMapping("/me")
    public User updateMyProfile(@RequestBody User updatedUser, Authentication auth) {
        updatedUser.setEmailId(auth.getName()); // force email from JWT
        return userService.updateCustomer(updatedUser);
    }
}
